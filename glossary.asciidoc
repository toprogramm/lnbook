[glossary]
[[glossary]]
== Глоссарий(((Glossary)))

Этот краткий глоссарий содержит множество терминов, используемых в отношении Bitcoin и сети Lightning. Эти термины используются на протяжении всей книги, поэтому добавьте их в закладки для быстрого поиска терминов.

* По возможности ищите по английским терминам, они распроложены в алфавитном порядке на английском языке. Переносить и сортировать не вижу ни малейшего смысла.
(((This quick glossary contains many of the terms used in relation to Bitcoin and the Lightning Network. These terms are used throughout the book, so bookmark this for a quick reference.)))
+
адрес (address)::
    Биткойн-адреса компактно кодирующие информацию, необходимую для оплаты получателю. Современный адрес это строка состоящая из букв и цифр, которая начинается с bc1 и выглядит так: +bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4+. Адрес - это подпись для блокировочного скрипта получателя, который может быть использован отправителем для подписания передачи средств получателю. Большинство адресов представляют собой либо публичный ключ получателя, либо некую форму скрипта, который определяет более сложные условия расходов. Предыдущий пример это - адрес bech32, кодирующий программу-свидетель, блокирующую средства на хэш открытого ключа (см. _Pay-to-Witness-Public-Key-Hash_). Существуют также более старые форматы адресов, начинающиеся с 1 или 3, которые используют кодировку адреса Base58Check для представления хэшей публичных ключей или хэшей скриптов.
    (((Bitcoin addresses compactly encode the information necessary to pay a receiver. A modern address consists of a string of letters and numbers that starts with bc1 and looks like +bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4+. An address is shorthand for a receiver's locking script, which can be used by a sender to sign over funds to the receiver. Most addresses either represent the receiver's public key or some form of script that defines more complex spending conditions. The preceding example is a bech32 address encoding a witness program locking funds to the hash of a public key (See _Pay-to-Witness-Public-Key-Hash_). There are also older address formats that start with 1 or 3 that use the Base58Check address encoding to represent public key hashes or script hashes.)))

асимметричная криптографическая система (asymmetric cryptographic system)::
    Асимметричная криптография, или криптография с публичным ключом, — это криптографическая система, в которой используются пара ключей: публичные ключи (public keys), которые могут свободно распространяться, и приватные ключи private keys, которые известны только владельцу.
    Генерация таких ключей зависит от криптографических алгоритмов, основанных на математических задачах целью которых является создать функции, которые легко решить одним способом, но очень сложно решить обратным.
    Эффективная безопасность требует только сохранения приватного ключа в тайне; публичный ключ же может распространяться открыто без ущерба для безопасности.
    (((Asymmetric cryptography, or public-key cryptography, is a cryptographic system that uses pairs of keys: public keys which may be disseminated widely, and private keys which are known only to the owner.
    The generation of such keys depends on cryptographic algorithms based on mathematical problems to produce functions that are easy to solve one way, but very difficult to solve in reverse.
    Effective security only requires keeping the private key private; the public key can be openly distributed without compromising security.)))

автопилот (autopilot)::
    Автопилот — это механизм рекомендаций для узлов Lightning, который использует статистику топологии сети Lightning, чтобы подсказать, с какими узлами им следует открывать каналы.
    В зависимости от реализации автопилота может быть рекомендована так же пропускная способность канала.
    Автопилот не является частью LN Протокола  (LN Protocol).
    (((An autopilot is a recommendation engine for Lightning nodes that uses statistics of the Lightning Network topology to suggest which nodes they should open channels with.
    Depending on the implementation of the autopilot, the channel capacity may also be recommended.
    An autopilot is not part of the LN Protocol.)))

баланс (balance)::
    Баланс платежного канала — это количество биткойнов, принадлежащих каждому партнеру канала.
    Например, Алиса могла бы открыть канал с Бобом за 1 BTC.
    Баланс канала тогда составит 1 BTC для Алисы и 0 BTC для Боба.
    По мере транзакций пользователей баланс канала будет обновляться.
    Например, если Алиса отправит 0,2 BTC Бобу, то баланс теперь составит 0,8 BTC Алисе и 0,2 BTC Бобу.
    Когда канал закроется, биткойны в канале будут разделены между двумя партнерами канала в соответствии с последним балансом, закодированным в транзакции обязательства.
    Смотреть _capacity_.
    (((The balance of a payment channel is the amount of bitcoin that belongs to each channel partner.
    For example, Alice could open a channel with Bob for the value of 1 BTC.
    The channel balance is then 1 BTC to Alice and 0 BTC to Bob.
    As the users transact, the channel balance will update.
    For example, if Alice sends 0.2 BTC to Bob, then the balance is now 0.8 BTC to Alice and 0.2 to Bob.
    When the channel is closed, the bitcoin in the channel will be divided between the two channel partners according to the latest balance encoded in the commitment transaction.
    In the Lightning Network, the ability to send and receive payments is limited by channel balances.
    See _ёмкость_.)))

bech32::
    bech32 относится к общему формату с контрольной суммой в кодировке base32, обеспечивающему надежные гарантии обнаружения ошибок. Хотя bech32 изначально был разработан для использования в качестве формата адреса для родных выводов SegWit(output - выводные данные)  (BIP-173), он также используется для кодирования счетов Lightning (BOLT #11). В то время как родной вывод SegWit версии 0 (P2WPKH и P2WSH) используют bech32, более новые версии выводов SegWit (например, Pay-to-Taproot или P2TR) используют улучшенный вариант bech32m (BIP-350). Адреса bech32m иногда называют адресами «bc1», что отражает префикс таких адресов. Родные SegWit выводы более эффективно используют пространство блока, чем старые адреса, и, следовательно, могут снизить комиссию за транзакцию для владельца такого адреса.
    (((bech32 refers to a generic check-summed base32-encoded format featuring strong error-detection guarantees. While bech32 was originally developed to be used as the address format for native SegWit outputs (BIP-173), it is also used to encode lightning invoices (BOLT #11). While native SegWit version 0 outputs (P2WPKH and P2WSH) use bech32, higher native SegWit output versions (e.g., Pay-to-Taproot or P2TR) use the improved variant bech32m (BIP-350). bech32m addresses are sometimes referred to as "bc1" addresses,  reflecting the prefix of such addresses. Native SegWit outputs are more blockspace-efficient than older addresses and therefore may reduce transaction fees for the owner of such an address.)))

Предложение по Улучшению Биткойн - BIP(Bitcoin Improvement Proposal)::
    Предложение, которое было представлено членами сообщества Bitcoin с целью улучшения Bitcoin. Например, BIP-21 - это предложение по улучшению схемы унифицикации идентификаторов ресурсов (URI) Биткойна. BIP можно найти на сайте https://github.com/bitcoin/bips[GitHub].
    (((A proposal that members of the Bitcoin community have submitted to improve Bitcoin. For example, BIP-21 is a proposal to improve the Bitcoin uniform resource identifier (URI) scheme. BIPs can be found at https://github.com/bitcoin/bips[GitHub].)))

bitcoin/биткойн, Bitcoin::
    В зависимости от контекста может означать название денежной единицы (монеты), сети или протокола, лежащего в основе системы. Написание биткойн со строчной русской буквой "б" обычно относится к денежной единице. Bitcoin с прописной английской буквой "B" обычно относится к протоколу или системе. Иногда я буду писать Bitcoin-a/у/е что означает падежи в русском.
    (((Depending on the context, could refer to the name of the currency unit (the coin), the network, or the underlying enabling protocol. Written as bitcoin with a lowercase "b" usually refers to the currency unit. Bitcoin with an uppercase "B" usually refers to the protocol or system.)))

Майнинг/Добыча в Bitcoin (Bitcoin mining)::
    Майнинг биткоина - это процесс создания блока из последних транзакций биткоина и последующего решения вычислительной задачи, требуемой в качестве доказательства работы(Proof of Work).
    Это процесс обновления общего реестра биткойна (т. е. блокчейна Bitcoin) и включения в реестр новых транзакций.
    Это также процесс выпуска новых биткойнов.
    Каждый раз, когда создается новый блок, узел майнинга будет получать новый биткойн, созданный в рамках сoinbase транзакции этого блока.
    (((Bitcoin mining is the process of constructing a block from recent Bitcoin transactions and then solving a computational problem required as proof of work.
    It is the process by which the shared bitcoin ledger (i.e., the Bitcoin blockchain) is updated and by which new transactions are included in the ledger.
    It is also the process by which new bitcoin is issued.
    Every time a new block is created, the mining node will receive new bitcoin created within the coinbase transaction of that block.)))

блок (block)::
    Блок — это структура данных в блокчейне Bitcoin, состоящая из заголовка и тела Bitcoin транзакции.
    Блок помечен меткой времени и привязан к определенному предшественнику (родительскому) блоку.
    При хешировании заголовок блока обеспечивает доказательство работы, которое делает блокчейн вероятностно неизменным.
    Блоки должны соответствовать правилам, установленным сетевым консенсусом для расширения блокчейна.
    Когда блок добавляется в блокчейн, считается, что включенные в него транзакции получили первое подтверждение.
    (((A block is a data structure in the Bitcoin blockchain that consists of a header and a body of Bitcoin transactions.
    The block is marked with a timestamp and commits to a specific predecessor (parent) block.
    When hashed, the block header provides the proof of work that makes the blockchain probabilistically immutable.
    Blocks must adhere to the rules enforced by network consensus to extend the blockchain.
    When a block is appended to the blockchain, the included transactions are considered to have their first confirmation.)))

Блокчейн (blockchain)::
    Блокчейн — это распределенный журнал или база данных всех Bitcoin транзакций.
    Транзакции группируются в дискретные обновления, называемые блоками, с ограничением до 4 миллионов единиц веса.
    Блоки создаются примерно каждые 10 минут посредством стохастического процесса, называемого майнингом.
    Каждый блок включает в себя вычислительно трудоемкое "доказательство работы".
    Требование доказательства работы используется для регулирования интервалов блоков и защиты блокчейна от атак с целью перезаписи истории:
    Злоумышленнику придется превзойти существующее доказательство работы, чтобы заменить уже опубликованные блоки, делая каждый блок вероятностно неизменяемым, поскольку он скрыт под последующими блоками.
    (((The blockchain is a distributed log, or database, of all Bitcoin transactions.
    Transactions are grouped in discrete updates called blocks, limited up to 4 million weight units.
    Blocks are produced approximately every 10 minutes via a stochastic process called mining.
    Each block includes a computationally intensive "proof of work."
    The proof of work requirement is used to regulate the block intervals and protect the blockchain against attacks to rewrite history:
    an attacker would need to outdo existing proof of work to replace already published blocks, making each block probabilistically immutable as it is buried under subsequent blocks.)))

BOLT::
    BOLT, или "Основы Технологии Lightning" (Basis of Lightning Technology), является официальной спецификацией сети Lightning. В отличие от Bitcoin, у которого есть эталонная реализация, которая также служит спецификацией протокола, различные реализации LN следуют BOLT, поэтому они могут работать друг с другом, образуя одну и ту же сеть. Он доступен по адресу https://github.com/lightningnetwork/lightning-rfc[GitHub]
    (((BOLT, or Basis of Lightning Technology, is the formal specification of the Lightning Network. Unlike Bitcoin, which has a reference implementation that also serves as the protocol's specification, the various LN implementations follow BOLT so they can work with one another to form the same network. It is available at https://github.com/lightningnetwork/lightning-rfc[GitHub]))).

ёмкость (capacity)::
    Емкость платежного канала - эквивалентна сумме биткойнов, предоставленная транзакцией пополнения средств.
    Поскольку транзакция пополнения средств публично видна в блокчейне, а канал объявляется через протокол сообщающихся, ёмкость является общедоступной информацией.
    Он не раскрывает никакой информации о том, каким количеством биткойнов каждый из партнеров канала владеет в канале, то есть о балансе.
    Большая ёмкость не гарантирует, что канал можно будет использовать для маршрутизации в обоих pass:[<span class="keep-together">направлениях</span>].
    (((The capacity of a payment channel is equivalent to the amount of bitcoin provided by the funding transaction.
    Because the funding transaction is publicly visible on the blockchain, and the channel is announced via the gossip protocol, the capacity is public information.
    It does not reveal any information about how much bitcoin each of the channel partners owns in the channel, i.e., the balance.
    A high capacity does not guarantee that the channel can be used for routing in both pass:[<span class="keep-together">directions</span>].)))

c-lightning::
    Реализация LN протокола компанией из Виктории https://blockstream.com[Blockstream]. Он написан на Си(C). Исходный код находится по адресу https://github.com/ElementsProject/lightning[GitHub].
    (((Implementation of the LN Protocol by the Victoria-based company https://blockstream.com[Blockstream]. It is written in C. Source code is at https://github.com/ElementsProject/lightning[GitHub].)))

закрывающая транзакция(((closing transaction)))::
    Если оба партнера канала соглашаются закрыть канал, они создают расчетную транзакцию, которая отражает самую последнюю транзакцию обязательства.
    После обмена подписями для закрывающей транзакции дальнейшие обновления канала производиться не должны.
    Взаимное закрытие канала с помощью закрывающей транзакции имеет то преимущество, что для востребования всех средств требуется меньше транзакций блокчейна по сравнению с односторонним принудительным закрытием канала путем публикации транзакции обязательства. Кроме того, средства обеих сторон могут быть немедленно потрачены (выведены) при закрытии транзакции.
    (((If both channel partners agree to close a channel, they will create a settlement transaction that reflects the most recent commitment transaction.
    After exchanging signatures for a closing transaction, no further channel updates should be made.
    Mutually closing a channel with the help of a closing transaction has the advantage that fewer blockchain transactions are required to claim all funds, in comparison to unilaterally forcing a channel close by publishing a commitment transaction. Additionally, funds for both parties are immediately spendable from a closing transaction.)))

CLTV::
    CLTV — это акроним/аббревиатура оператора Bitcoin-Script OP_CHECKLOCKTIMEVERIFY (ПроверитьЗаболокироватьВремяПодтвердить).Он определяет абсолютную высоту блока, прежде чем вывод может быть потрачен. Атомарность процесса маршрутизации сильно зависит от значений CLTV в HTLC. Узлы маршрутизации объявляют через протокол сообщающихся ожидаемые дельты срока действия CLTV, которые они выбирают для любых входящих и исходящих HTLC.
    (((CLTV is an acronym/abbreviation for the Bitcoin Script operator OP_CHECKLOCKTIMEVERIFY. This defines an absolute blockheight before an output can be spent. The atomicity of the routing process heavily depends on CLTV values in HTLCs. Routing nodes announce, via the gossip protocol, their expected CLTV expiry deltas that they wish for any incoming and outgoing HTLCs.)))

база монет (coinbase)::
    Coinbase — это специальное поле, разрешенное только для ввода coinbase транзакций.
    Coinbase допускает до 100 байт произвольных данных, но, начиная с BIP-34, она должна сначала указать текущую высоту блока, чтобы гарантировать уникальность coinbase транзакций.
    Не путать с сoinbase транзакцией.
    (((The coinbase is a special field only permitted in the sole input of coinbase transactions.
    The coinbase allows up 100 bytes of arbitrary data, but since BIP-34, it must first feature the current block height to ensure that coinbase transactions are unique.
    Not to be confused with coinbase transaction.)))

coinbase транзакция (coinbase transaction)::
    Первая транзакция в блоке, который всегда создается майнером и включает в себя одну coinbase.
    Coinbase транзакция может потребовать вознаграждение за блок и назначить его одному или нескольким выходам.
    Награда за блок состоит из субсидии за блок (вновь созданный биткойн) и суммы всех комиссий за транзакции, включенные в блок.
    Coinbase выходы можно потратить только после достижения 100 блоков.
    Если блок включает в себя какие-либо транзакции SegWit, coinbase транзакция должна включать подтверждение идентификаторов транзакции-свидетеля в дополнительных выходных данных.
    (((The first transaction in a block which is always created by a miner and which includes a single coinbase.
    The coinbase transaction may claim the block reward and assign it to one or more outputs.
    The block reward consists of the block subsidy (newly created bitcoin) and the sum of all transaction fees from transactions included in the block.
    Coinbase outputs can only be spent after maturing for 100 blocks.
    If the block includes any SegWit transactions, the coinbase transaction must include a commitment to the witness transaction identifiers in an additional output.)))

холодное хранение (cold storage)::
    Относится к хранению большого количества биткойнов в автономном режиме. Мы можем достичь Холодного Хранения, когда приватные ключи Bitcoin создаются и хранятся в безопасной автономной среде. Холодное хранение важно для защиты биткойн-сбережений. Интернет-компьютеры уязвимы для хакеров, и их не следует использовать для хранения значительного количества биткойнов.
    (((Refers to keeping an amount of bitcoin offline. Cold storage is achieved when Bitcoin private keys are created and stored in a secure offline environment. Cold storage is important to protect bitcoin holdings. Online computers are vulnerable to hackers and should not be used to store a significant amount of bitcoin.)))

транзакция обязательства (commitment transaction)::
    Транзакция обязательства — это биткойн-транзакция, подписанная обоими партнерами по каналу, которая кодирует последнее состояние баланса канала.
    Каждый раз, когда новый платеж совершается или пересылается с использованием канала, баланс канала обновляется, и обе стороны подписывают новую транзакцию обязательства.
    Важно отметить, что в канале между Алисой и Бобом, оба и Алиса, и Боб сохраняют свою собственную версию транзакции обязательства, которая также подписывается другой стороной.
    (((A commitment transaction is a Bitcoin transaction, signed by both channel partners, that encodes the latest balance of a channel.
    Every time a new payment is made or forwarded using the channel, the channel balance will update, and a new commitment transaction will be signed by both parties.
    Importantly, in a channel between Alice and Bob, both Alice and Bob keep their own version of the commitment transaction, which is also signed by the other party.)))
    В любой момент pass:[<span class="keep-together">канал</span>] может быть закрыт Алисой или Бобом, если они отправят свою транзакцию обязательства в блокчейн Bitcoin.
    Отправка более старой (устаревшей) транзакции обязательства считается _обманом_ (т. е. нарушением протокола) в сети Lightning и может быть оштрафована другой стороной, требующей все средства в канале для себя посредством штрафной транзакции.
    (((At any point, the pass:[<span class="keep-together">channel</span>] can be closed by either Alice or Bob if they submit their commitment transaction to the Bitcoin blockchain.
    Submitting an older (outdated) commitment transaction is considered _cheating_ (i.e., a protocol breach) in the Lightning Network and can be penalized by the other party, claiming all the funds in the channel for themselves, via a penalty transaction.)))

подтверждения (confirmations)::
    Как только транзакция включена в блок, она имеет одно подтверждение. Как только в блокчейне будет добыт _другой_ блок, транзакция получит два подтверждения и так далее. Шесть или более подтверждений считаются достаточным доказательством того, что транзакция не может быть отменена.
    (((Once a transaction is included in a block, it has one confirmation. As soon as _another_ block is mined on the blockchain, the transaction has two confirmations, and so on. Six or more confirmations are considered sufficient proof that a transaction cannot be reversed.)))

контракт (contract)::
    Контракт — это набор биткойн-транзакций, которые вместе приводят к определенному желаемому поведению.
    Примерами могут служить RSMC для создания не требующего доверия, двунаправленного платежного канала или HTLC для создания механизма, позволяющего пересылку не требующих доверия платежей через третьи стороны.
    (((A contract is a set of Bitcoin transactions that together result in a certain desired behavior.
    Examples are RSMCs to create a trustless, bidirectional payment channel, or HTLCs to create a mechanism that allows trustless forwarding of payments through third parties.)))

Обмен ключами Диффи-Хеллмана (Diffie–Hellman Key Exchange - DHKE)::
    В сети Lightning используется метод эллиптической кривой Диффи-Хеллмана (ECDH).
    Это протокол соглашения об анонимном ключе, который позволяет двум сторонам, каждая из которых имеет пару публичный-приватный ключ эллиптической кривой, для создания общего секрета по незащищенному каналу связи.
    Этот общий секрет можно использовать непосредственно как ключ или для извлечения другого ключа.
    (((On the Lightning Network, the Elliptic Curve Diffie–Hellman (ECDH) method is used.
    It is an anonymous key agreement protocol that allows two parties, each having an elliptic curve public-private key pair, to establish a shared secret over an insecure communication channel.
    This shared secret may be directly used as a key, or to derive another key.)))
    Ключ или производный ключ затем можно использовать для шифрования последующих сообщений используя шифр с симметричным ключом.
    Примером производного ключа может быть общий секрет между эфемерным ключом сессии  onion-отправителя и публичным ключом onion-hop узла, как описано и используется SPHINX Mix Format.
    * onion-hop  - прыжок(маршрутизация) в сети onion _см. луковая маршрутризация (onion routing)_. 
    (((The key, or the derived key, can then be used to encrypt subsequent communications using a symmetric-key cipher.
    An example of the derived key would be the shared secret between the ephemeral session key of a sender of an onion with the node's public key of a hop of the onion, as described and used by the SPHINX Mix Format.)))

цифровая подпись (digital signature)::
    Цифровая подпись — это математическая схема проверки подлинности и целостности цифровых сообщений или документов.
    Его можно рассматривать как криптографическое обязательство, в котором сообщение не скрыто.
    (((A digital signature is a mathematical scheme for verifying the authenticity and integrity of digital messages or documents.
    It can be seen as a cryptographic commitment in which the message is not hidden.)))

двойная трата (double-spending)::
    Двойная трата — это результат успешной траты денег более одного раза.
    Биткойн защищает от двойных расходов, проверяя, что каждая транзакция, добавленная в блокчейн, соответствует правилам консенсуса; это означает проверку того, что вводы для транзакции ранее не были потрачены.
    (((Double-spending is the result of successfully spending some money more than once.
    Bitcoin protects against double-spending by verifying that each transaction added to the blockchain adheres to the rules of consensus; this means checking that the inputs for the transaction have not been previously spent.)))

Алгоритм Цифровой Подписи Эллиптической Кривой (Elliptic Curve Digital Signature Algorithm - ECDSA)::
    Алгоритм цифровой подписи эллиптической кривой или ECDSA — это криптографический алгоритм, используемый Bitcoin-ом для обеспечения того, чтобы средства могут быть потрачены только владельцем правильного приватного ключа.
    (((Elliptic Curve Digital Signature Algorithm or ECDSA is a cryptographic algorithm used by Bitcoin to ensure that funds can only be spent by the holder of the correct private key.)))

Eclair::
    Реализация Протокола LN Парижской компанией https://acinq.co[ACINQ]. Он написан на Scala. Исходный код находится по адресу https://github.com/ACINQ/eclair[GitHub].
    (((Implementation of the LN Protocol by the Paris-based company https://acinq.co[ACINQ]. It is written in Scala. Source code is at https://github.com/ACINQ/eclair[GitHub].)))

кодирование (encoding)::
    Кодирование — это процесс преобразования сообщения в другую форму. Например, преобразование числа из десятичного в шестнадцатеричное.
    (((Encoding is the process of converting a message into a different form. For example, converting a number from decimal to a hexadecimal.)))

cервер Electrum(Electrum server)::
    Сервер Electrum — это Bitcoin-узел с дополнительным интерфейсом (API). Это часто требуется для биткойн-кошельков, которые не запускают полноценный узел. Например, эти кошельки проверяют статус определенных транзакций или транслируют транзакции в мемпул(mempool) с помощью API-интерфейсов сервера Electrum. Некоторые Lightning кошельки также используют серверы Electrum.
    (((An Electrum server is a Bitcoin node with an additional interface (API). It is often required by bitcoin wallets that do not run a full node. For example, these wallets check the status of specific transactions or broadcast transactions to the mempool using Electrum server APIs. Some Lightning wallets also use Electrum servers.)))

эфемерный ключ (ephemeral key)::
    Эфемерные ключи — это ключи, которые используются только в течение короткого времени и не сохраняются после использования. Они часто извлекаются (вычисляются) для использования в одном сеансе из другого ключа, который хранится в течение длительного времени. Эфемерные ключи в основном используются в SPHINX Mix Format и onion-маршрутизации (луковая маршрутизация - далее onion-маршрутизация)  в сети Lightning.
    Это повышает безопасность передаваемых сообщений или платежей.
    Даже в случае утечки эфемерного ключа общедоступной становится информация только об одном сеансе.
    (((Ephemeral keys are keys that are only used for a short time and not retained after use. They are often derived for use in one session from another key that is held long-term. Ephemeral keys are mainly used within the SPHINX Mix Format and onion routing on the Lightning Network.
    This increases the security of transported messages or payments.
    Even if an ephemeral key leaks, only information about a single session becomes public.)))

биты особенностей (feature bits)::
    Двоичная (бинарная) строка, которую узлы Lightning используют для передачи друг другу информации о поддерживаемых особенностях.
    Биты особенностей включены во многие сообщения Lightning, а также в BOLT #11.
    Их можно декодировать с помощью BOLT #9, и они сообщат узлам, какие функции включены на узле и являются ли они обратно совместимыми.
    Также известны как флаги особенностей (feature flags).
    (((A binary string that Lightning nodes use to communicate to each other which features they support.
    Feature bits are included in many Lightning messages as well as BOLT #11.
    They can be decoded using BOLT #9, and will tell nodes which features the node has enabled, and whether these are backward compatible.
    Also known as feature flags.)))

комиссии (fees)::
    В контексте сети Lightning узлы будут взимать маршрутизационный сбор за пересылку платежей других пользователей.
    Отдельные узлы могут устанавливать свою собственную политику комиссий, которая будет рассчитываться как сумма фиксированной +базовой_комиссии+ (base_fee) и +комиссии_сети+ (fee_rate), и зависит от суммы платежа.
    В контексте Биткойна отправитель транзакции платит майнерам транзационную комиссию за включение транзакции в блок.
    Комиссия за транзакцию в Bitcoin не включает базовую комиссию и линейно зависит от веса транзакции, а не от суммы.
    (((In the context of the Lightning Network, nodes will charge routing fees for forwarding other users' payments.
    Individual nodes can set their own fee policies which will be calculated as the sum of a fixed +base_fee+ and a +fee_rate+ that depends on the payment amount.
    In the context of Bitcoin, the sender of a transaction pays a transaction fee to miners for including the transaction in a block.
    Bitcoin transaction fees do not include a base fee and depend linearly on the weight of the transaction, but not on the amount.)))

транзакция пополнения `средств` (funding transaction)::
    Транзакция пополнения используется для открытия платежного канала. Стоимость (в биткойнах) транзакции пополнения в точности соответствует емкости платежного канала.
    Выводом транзакции пополнения является скрипт мультиподписи(multisig) 2-из-2, где каждый партнер по каналу контролирует один ключ. Из-за структуры мультиподписи их можно потратить только по взаимному согласию партнеров по каналу.
    В конечном итоге он будет потрачен одной из двух, транзакцией обязательства или закрывающей транзакцией.
    (((The funding transaction is used to open a payment channel. The value (in bitcoin) of the funding transaction is exactly the capacity of the payment channel.
    The output of the funding transaction is a 2-of-2 multisignature script (multisig) where each channel partner controls one key. Due to its multisig nature, it can only be spent by mutual agreement between the channel partners.
    It will eventually be spent by one of the commitment transactions or by the closing transaction.)))

глобальные функции / поле глобальных функций (global features +globalfeatures+ field)::
    Глобальные функции узла Lightning — это функции, представляющие интерес для всех остальных узлов.
    Чаще всего они связаны с поддерживаемыми форматами маршрутизации.
    Они объявляются в сообщении `init` peer-протокола, а также в сообщениях `channel_announcement` и `node_announcement` протокола слухов.
    (((Global features of a Lightning node are the features of interest for all other nodes.
    Most commonly they are related to supported routing formats.
    They are announced in the `init` message of the peer protocol as well as the `channel_announcement` and `node_announcement` messages of the gossip protocol.)))

протокол слухов (gossip protocol)::
    Узлы LN отправляют и получают информацию о топологии сети Lightning через молву (сообщения), которыми обмениваются со своими узлами.
    Протокол слухов в основном определен в BOLT #7 и определяет формат сообщений `node_announcement`, `channel_announcement` и `channel_update`.
    Чтобы предотвратить спам, сообщения объявления узла будут пересылаться только в том случае, если у узла уже есть канал, а сообщения объявлением канала будут пересылаться только в том случае, если транзакция пополнения канала была подтверждена сетью Биткойн.
    Обычно узлы Lightning подключаются к своим партнерам по каналу, но можно подключаться к любому другому узлу Lightning для обработки сообщений слухов.
    (((LN nodes send and receive information about the topology of the Lightning Network through gossip messages which are exchanged with their peers.
    The gossip protocol is mainly defined in BOLT #7 and defines the format of the `node_announcement`, `channel_announcement`, and `channel_update` messages.
    To prevent spam, node announcement messages will only be forwarded if the node already has a channel, and channel announcement messages will only be forwarded if the funding transaction of the channel has been confirmed by the Bitcoin network.
    Usually, Lightning nodes connect with their channel partners, but it is fine to connect with any other Lightning node to process gossip messages.)))

 аппаратный кошелек (hardware wallet)::
    Аппаратный кошелек — это особый тип Bitcoin кошелька, в котором хранятся личные ключи пользователя на защищенном аппаратном устройстве.
    На момент написания книги аппаратные кошельки недоступны для узлов LN, поскольку ключи используемые в LN должны быть онлайн, чтобы участвовать в протоколе.
    (((A hardware wallet is a special type of Bitcoin wallet which stores the user's private keys in a secure hardware device.
    As of writing the book, hardware wallets are not available for LN nodes because the keys used by Lightning need to be online to participate in the protocol.)))
    * Аппаратный кошелек это независимое устройство. Для сети Bitcoin он может быть использован offline. А как выше было указано для сети Lightning пока не существует таких устройств. 

хэш (hash)::
    Цифровой отпечаток фиксированного размера некоторого двоичного входа произвольной длины. Также известен как _digest_.
    (((A fixed-size digital fingerprint of some arbitrary-length binary input. Also known as a _digest_.)))

код аутентификации сообщения на основе хэша (hash-based message authentication code - HMAC)::
    HMAC — это алгоритм проверки целостности и подлинности сообщения на основе хеш-функции и криптографического ключа.
    Он используется в onion-маршрутизации для обеспечения целостности пакета на каждом прыжке, а также как вариант внутри Noise Protocol, используемом для шифрования сообщений.
    (((HMAC is an algorithm for verifying the integrity and authenticity of a message based on a hash function and a cryptographic key.
    It is used in onion routing to ensure the integrity of a packet at each hop, as well as within the Noise Protocol variant used for message encryption.)))

хэш функция(hash function)::
    Криптографическая хеш-функция — это математический алгоритм, который преобразует данные произвольного размера в битовую строку фиксированного размера (хэш) и спроектирован чтобы быть однонаправленной функцей, то есть функцией, которую невозможно инвертировать (провести действия обратно чтобы получить исходный ввод). 
    Единственный способ воссоздать вводные данные из вывода идеальной криптографической хэш-функции — это попытаться перебрать все возможные варианты вводов (brute-force search), чтобы проверить, дают ли они совпадение.
    (((A cryptographic hash function is a mathematical algorithm that maps data of arbitrary size to a bit string of a fixed size (a hash) and is designed to be a one-way function, that is, a function that is infeasible to invert.
    The only way to recreate the input data from an ideal cryptographic hash function's output is to attempt a brute-force search of possible inputs to see if they produce a match.)))

хеш-замок (hashlock)::
    Хэш-замок — это условие траты Bitcoin-Скрипта, которое ограничивает трату вывода до тех пор, пока не будет обнаружен определенный фрагмент данных. Хэшлоки обладают полезным свойством: как только какой-либо хэш-замок раскрывается в результате траты, любые другие хэш-замки, защищенные с помощью того же ключа, также могут быть потрачены. Это позволяет создавать несколько выводов, которые обременены одним и тем же хэш-замком и становятся пригодными для траты одновременно (все из них).
    (((A hashlock is a Bitcoin Script spending condition that restricts the spending of an output until a specified piece of data is revealed. Hashlocks have the useful property that once any hashlock is revealed through spending, any other hashlocks secured using the same key can also be spent. This makes it possible to create multiple outputs that are all encumbered by the same hashlock and which all become spendable at the same time.)))

хэш-контракт с временной блокировкой (hash time-locked contract - HTLC)::
    Контракт с временной блокировкой хэша (HTLC) — это Bitcoin-Скрипт, который состоит из хэш-замков и временных блокировок, требующих, чтобы получатель платежа либо потратил платеж до истечения крайнего срока, представив предобраз хэша, либо отправитель мог потребовать возврата после истечения временной блокировки.
    В сети Lightning, HTLC являются выводами транзакции обязательства платежного канала и используются для обеспечения не требующей доверия маршрутизации платежей.
    (((A hash time-locked contract (HTLC) is a Bitcoin Script that consists of hashlocks and timelocks to require that the recipient of a payment either spends the payment prior to a deadline by presenting the hash preimage or the sender can claim a refund after the timelock expires.
    On the Lightning Network, HTLCs are outputs in the commitment transaction of a payment channel and are used to enable the trustless routing of payments.)))

инвойс (invoice)::
    Процесс оплаты в сети Lightning инициируется получателем (payee), который выставляет инвойс, также известный как _запрос на оплату_.
    Инвойсы включают в себя хеш платежа, сумму, описание и срок действия. Lightning-инвойсы описаны в BOLT #11.
    Инвойсы также могут включать в себя резервный Bitcoin-адрес, на который можно произвести платеж в случае, если маршрут не найден, а также подсказки по маршрутизации платежа через частный канал.
    * Инвойс переводится как "счет" или "счет фактура", далее буду переводить как инвойс. 
    (((The payment process on the Lightning Network is initiated by the recipient (payee) who issues an invoice, also known as a _payment request_.
    Invoices include the payment hash, the amount, a description, and the expiry time. Lightning invoices are defined in BOLT #11.
    Invoices can also include a fallback Bitcoin address to which the payment can be made in case no route can be found, as well as hints for routing a payment through a private channel.)))

маршрутизация точно-в-срок (just-in-time (JIT) routing)::
    Маршрутизация точно-в-срок (JIT) — это альтернатива маршрутизации на основе источника, которая была впервые pass:[<span class="keep-together">предложена</span>] соавтором Рене Пикхардт.
    Благодаря JIT-маршрутизации промежуточные узлы на пути могут приостановить текущий платеж, чтобы сбалансировать свои каналы, прежде чем продолжить платеж.
    Это могло бы позволить им успешно пересылать платежи, которые в противном случае могли бы не состояться из-за отсутствия исходящей емкости.
   (((Just-in-time (JIT) routing is an alternative to source-based routing that was first pass:[<span class="keep-together">proposed</span>] by coauthor René Pickhardt.
   With JIT routing, intermediary nodes along a path can pause an in-flight payment to rebalance their channels before proceeding with the payment.
   This might allow them to successfully forward payments that might otherwise have failed due to a lack of outgoing capacity.)))

сообщение Lightning (Lightning message)::
    Сообщение Lightning — это зашифрованная строка данных, которую можно отправлять между двумя пирами в сети Lightning. Подобно другим протоколам связи, сообщения Lightning состоят из заголовка и тела. Заголовок и тело имеют собственный HMAC. Сообщения Lightning являются основным строительным блоком уровня обмена сообщениями.
    (((A Lightning message is an encrypted data string that can be sent between two peers on the Lightning Network. Similar to other communication protocols, Lightning messages consist of a header and a body. The header and the body have their own HMAC. Lightning messages are the main building block of the messaging layer.)))
    * **peer** может переводиться как "равный" или "пользователь", 
    буду переводить как "пир", смотрите по контексту что это может означать.
    
Сеть Lightning, Сетевой Протокол Lightning, pass:[<span class="keep-together">Протокол Lightning</span>] (Lightning Network, Lightning Network Protocol, pass:[<span class="keep-together">Lightning Protocol</span>])::
    Lightning Network — это протокол поверх Bitcoin (или других криптовалют).
    Он создает сеть платежных каналов, которая обеспечивает не требующую доверия пересылку платежей через сеть с помощью HTLC и onion-маршрутизации.
    Другими компонентами сети Lightning являются протокол слухов, транспортный слой и запросы платежей.
    (((The Lightning Network is a protocol on top of Bitcoin (or other cryptocurrencies).
    It creates a network of payment channels which enables the trustless forwarding of payments through the network with the help of HTLCs and onion routing.
    Other components of the Lightning Network are the gossip protocol, the transport layer, and payment requests.)))

набор протоколов сети Lightning (Lightning Network protocol suite)::
    Набор протоколов сети Lightning состоит из пяти слоев, которые отвечают за различные части протокола.
    От низа (первый слой) до верха (пятый слой) эти слои называются: слой сетевых коммуникаций, слой обмена сообщениями, слой peer-to-peer, слой маршрутизации и слой оплаты.
    Различные BOLT описывают части одного или нескольких слоев.
    (((The Lightning Network protocol suite consists of five layers that are responsible for various parts of the protocol.
    From bottom (the first layer) to the top (the fifth layer), these layers are called the network communication layer, the messaging layer, the peer-to-peer layer, the routing layer, and the payment layer.
    Various BOLTs define parts of one or several layers.)))

узел сети Lightning, узел Lightning (Lightning Network node, Lightning node)::
    Компьютер, участвующий в сети Lightning через peer-to-peer протокол Lightning.
    Узлы Lightning имеют возможность открывать каналы с другими узлами, отправлять и получать платежи, а также маршрутизировать платежи от других пользователей.
    Обычно пользователь узла Lightning также запускает узел Bitcoin.
    (((A computer participating in the Lightning Network, via the Lightning peer-to-peer protocol.
    Lightning nodes have the ability to open channels with other nodes, send and receive payments, and route payments from other users.
    Typically, a Lightning node user will also run a Bitcoin node.)))

lnd::
    Реализация LN протокола компанией из Сан-Франциско https://lightning.engineering[Lightning Labs].
    Он написан на Go. Исходный код находится на https://github.com/lightningnetwork/lnd[GitHub].
    (((Implementation of the LN Protocol by the San Francisco-based company https://lightning.engineering[Lightning Labs].
    It is written in Go. Source code is at https://github.com/lightningnetwork/lnd[GitHub].)))

локальные функции(local features (field: +localfeatures+))::
    Локальные функции узла LN — это настраиваемые функции, представляющие прямой интерес для его пиров.
    Они объявляются в сообщении `init` peer-протокола, а также в сообщениях `channel_announcement` и `node_announcement` протокола слухов.
    (((Local features of an LN node are the configurable features of direct interest to its peers.
    They are announced in the `init` message of the peer protocol as well as in the `channel_announcement` and `node_announcement` messages of the gossip protocol.)))

время блокировки (locktime)::
    Locktime или, более технически, nLockTime — это часть Bitcoin транзакции, которая указывает самое раннее время или самый ранний блок, когда эта транзакция может быть добавлена в блокчейн. 
    (((Locktime, or more technically nLockTime, is the part of a Bitcoin transaction that indicates the earliest time or earliest block when that transaction may be added to the blockchain.)))

слой обмена сообщениями (messaging layer)::
    Слой обмена сообщениями построен поверх слоя сетевых подключений в наборе протоколов сети Lightning.
    Он отвечает за обеспечение зашифрованной и безопасной связи и обмена информацией через выбранный протокол слоя сетевого подключения.
    Уровень обмена сообщениями определяет структуру и формат сообщений Lightning, как указано в BOLT #1.
    Биты функций, указанные в BOLT #9, также являются частью этого уровня.
    (((The messaging layer builds on top of the network connection layer of the Lightning Network protocol suite.
    It is responsible for ensuring an encrypted and secure communication and exchange of information via the chosen network connection layer protocol.
    The messaging layer defines the framing and format of Lightning Messages as defined in BOLT #1.
    The feature bits defined in BOLT #9 are also part of this layer.)))

миллисатоши (millisatoshi)::
    Наименьшая расчетная единица в сети Lightning. Миллисатоши — это одна стомиллиардная часть одного биткойна. Миллисатоши — это тысячная часть одного сатоши. Миллисатоши не существуют (в сети Bitcoin) и не могут быть переведены в сети Bitcoin.
    (((The smallest unit of account on the Lightning Network. A millisatoshi is one hundred billionth of a single bitcoin. A millisatoshi is one thousandth of one satoshi. Millisatoshis do not exist on, nor can they be settled on, the Bitcoin network.)))

составные платежи (multipart payments - MPP)::
    Составные  платежи (MPP), часто также называемые многопутевыми (multipath) платежами, представляют собой метод для разделения суммы платежа на несколько более мелких частей и их доставки по одному или нескольким путям. Поскольку MPP может отправлять большинство или все части по одному пути, термин _составной платеж_ является более точным, чем многопутевый платеж. В информатике составные платежи смоделированы как сетевые потоки.
 	(((Multipart payments (MPP), often also referred to as multipath payments, are a method for splitting the payment amount into multiple smaller parts and delivering them along one or more paths. Since MPP can send many or all parts over a single path, the term multipart payment is more accurate than multipath payment. In computer science, multipart payments are modeled as network flows.)))

мультиподпись (multisignature)::
    Мультиподпись (multisig) относится к скрипту, который требует более одной подписи для авторизации траты.
    Платежные каналы всегда кодируются как мультиподписаные адреса, требующие одной подписи от каждого партнера платежного канала.
    В стандартном случае двустороннего платежного канала используется адрес с мультиподписью 2 из 2.
    (((Multisignature (multisig) refers to a script that requires more than one signature to authorize spending.
    Payment channels are always encoded as multisig addresses requiring one signature from each partner of the payment channel.
    In the standard case of a two-party payment channel, a 2-of-2 multisig address is used.)))

узел (node)::
    Смотреть _Lightning Network node_.

емкость сети (network capacity)::
    Емкость LN — это общий объем биткойнов, заблокированных и циркулирующих внутри сети Lightning.
    Это сумма емкостей каждого публичного канала.
    В некоторой степени это отражает использование сети Lightning, поскольку мы ожидаем, что люди помещают биткойны в каналы Lightning, чтобы тратить их или пересылать платежи других пользователей.
    (((LN capacity is the total amount of bitcoin locked and circulated inside the Lightning Network.
    It is the sum of capacities of each public channel.
    It reflects the usage of the Lightning Network to some extent because we expect that people put bitcoin into Lightning channels to spend it or forward other users' payments.)))
    Следовательно, чем больше количество биткойнов в каналах Lightning, тем выше ожидаемое использование сети Lightning.
    (((Hence the higher the amount of bitcoin in Lightning channels, the higher the expected usage of the Lightning Network.)))
    Обратите внимание: поскольку можно наблюдать только емкость публичного канала, истинная емкость сети неизвестна. Кроме того, поскольку емкость канала может обеспечивать неограниченное количество платежей туда и обратно, емкость сети не означает ограничения стоимости, передаваемой по сети Lightning.
- **limit of value?**
    (((Note that since only public channel capacity can be observed, the true network capacity is unknown. Also, since a channel's capacity can enable an unlimited number of payments back and forth, network capacity does not imply a limit of value transferred on the Lightning Network.)))

слой сетевых соединений (network connection layer)::
    Самый нижний слой набора протоколов Lightning Network.
    Он отвечает за поддержку таких интернет-протоколов, как IPv4, IPv6, TOR2 и TOR3, и использует их для создания безопасного шифрованного канала связи, как определено в BOLT #8, или для передачи DNS при старте загрузки сети, как определено в BOLT #10.
    (((The lowest layer of the Lightning Network protocol suite.
    Its responsibility is to support internet protocols like IPv4, IPv6, TOR2, and TOR3, and use them to establish a secure cryptographic communication channel as defined in BOLT #8, or to speak DNS for the bootstrapping of the network as defined in BOLT #10.)))

Noise_XK::
    Шаблон протокола Noise Protocol Framework для создания аутентифицированного и зашифрованного канала связи между двумя пирами сети Lightning Network.
    X - означает, что инициатору соединения не нужно знать открытый ключ.
    K - означает, что необходимо знать открытый ключ получателя.
    (((The template of the Noise Protocol Framework to establish an authenticated and encrypted communication channel between two peers of the Lightning Network.
    X means that no public key needs to be known from the initiator of the connection.
    K means that the public key of the receiver needs to be known.)))

onion маршрутизация (onion routing)::
    Onion маршрутизация - это способ анонимной передачи данных по компьютерной сети.
    В onion-сети сообщения заключены в слои шифрования, аналогичные слоям лука (onion).
    Зашифрованные данные передаются через ряд сетевых узлов, называемых onion-маршрутизаторы, каждый из которых снимает один слой, открывая следующее направление для данных.
    Когда последний слой расшифровывается, сообщение прибывает в пункт назначения.
    Отправитель остается анонимным, поскольку каждый посредник знает только местоположение  предшествующего и последующего узлов.
    * термин onion-маршрутизация выбран по причине более простого написания и понимания.
    (((Onion routing is a technique for anonymous communication over a computer network.
    In an onion network, messages are encapsulated in layers of encryption, analogous to layers of an onion.
    The encrypted data is transmitted through a series of network nodes called onion routers, each of which peels away a single layer, uncovering the data's next destination.
    When the final layer is decrypted, the message arrives at its destination.
    The sender remains anonymous because each intermediary knows only the location of the immediately preceding and following nodes))).

вывод (output)::
    Вывод транзакции Bitcoin, также называемый выводом непотраченной транзакции (UTXO).
    Вывод - это неделимое количество биткоинов, которое можно потратить, а также сценарий, определяющий, какие условия должны быть выполнены, чтобы эти биткоины были потрачены.
    Каждая биткоин-транзакция расходует некоторые выводы ранее записанных транзакций и создает новые выводы, которые могут быть потрачены позже последующими транзакциями.
    Типичный вывод биткоинов требует подписи чтобы провести трату, но для вывода может потребоваться выполнение более сложных сценариев.
    Например, сценарий с мультиподписью требует подписи двух или более держателей ключей, прежде чем вывод может быть потрачен, что является фундаментальным структурным блоком сети Lightning.
    (((The output of a Bitcoin transaction, also called an unspent transaction output (UTXO).
    An output is an indivisible amount of bitcoin that can be spent, as well as a script that defines what conditions need to be fulfilled for that bitcoin to be spent.
    Every bitcoin transaction consumes some outputs of previously recorded transactions and creates new outputs that can be spent later by subsequent transactions.
    A typical bitcoin output will require a signature to be spent, but outputs can require the fulfillment of more complex scripts.
    For example, a multisignature script requires two or more key holders sign before the output can be spent, which is a fundamental building block of the Lightning Network.)))

Оплата по публичному хэш-ключу ( Pay-to-Public-Key-Hash - P2PKH)::
    P2PKH - это тип вывода, который привязывает биткоин к хэшу открытого ключа. Вывод, заблокированный сценарием P2PKH, можно разблокировать (потратить), предъявив публичный ключ, соответствующий хэшу, и цифровую подпись, созданную соответствующим приватным ключом.
    (((P2PKH is a type of output that locks bitcoin to the hash of a public key. An output locked by a P2PKH script can be unlocked (spent) by presenting the public key matching the hash and a digital signature created by the corresponding private key.)))

Оплата по хеш-сценарию (Pay-to-Script-Hash - P2SH)::
    P2SH - это универсальный тип вывода, который позволяет использовать сложные Биткоин-Сценарии. В P2SH сложный сценарий, в деталях описывающий условия траты вывода (сценарий погашения - redeem script), не указывается в сценарии блокировки. Вместо этого сумма привязывается к хэшу сценария, который должен быть предоставлен и выполнен для траты вывода.
    (((P2SH is a versatile type of output that  allows the use of complex Bitcoin Scripts. With P2SH, the complex script that details the conditions for spending the output (redeem script) is not presented in the locking script. Instead, value is locked to the hash of a script, which must be presented and fulfilled to spend the output.)))

адрес P2SH (P2SH address)::
    Адреса P2SH - это Base58Check-кодировки 20-байтового хэша сценария. Адреса P2SH начинаются с "3". P2SH-адреса скрывают всю сложность, так что отправитель платежа не видит сценарий.
    (((P2SH addresses are Base58Check encodings of the 20-byte hash of a script. P2SH addresses start with a "3." P2SH addresses hide all of the complexity, so that the sender of a payment does not see the script.)))

Оплата с Помощью Публичного Хэш-Ключа Свидетеля (Pay-to-Witness-Public-Key-Hash - P2WPKH)::
    P2WPKH - это SegWit-эквивалент P2PKH, использующий отдельного свидетеля. Подпись для траты вывода P2WPKH помещается в дерево свидетелей вместо поля ScriptSig. Смотреть _SegWit_
	(((P2WPKH is the SegWit equivalent of P2PKH, using a segregated witness. The signature to spend a P2WPKH output is put in the witness tree instead of the ScriptSig field. See _SegWit_.)))

адрес P2WPKH (P2WPKH address)::
	"Родной SegWit v0" формат адресов , адреса P2WPKH имеют bech32-кодировку и начинаются с "bc1q".
    (((The "native SegWit v0" address format, P2WPKH addresses are bech32-encoded and start with "bc1q".)))

Оплата с Помощью Хэш-Сценария Свидетеля(Pay-to-Witness-Script-Hash - P2WSH)::
    P2WSH - это SegWit-эквивалент P2SH, использующий отдельного свидетеля. Подпись и сценарий для траты вывода P2WSH помещаются в дерево свидетелей вместо поля ScriptSig. Смотреть _SegWit_.
    (((P2WSH is the SegWit equivalent of P2SH, using a segregated witness. The signature and script to spend a P2WSH output is put in the witness tree instead of the ScriptSig field. See _SegWit_.)))

адрес P2WSH(P2WSH address)::
    "Родной SegWit v0" формат адресов сценариев, адреса P2WSH имеют bech32-кодировку и начинаются с "bc1q".
	(((The "native Segwi v0" script address format, P2WSH addresses are bech32-encoded and start with "bc1q".)))

Оплата с помощью Taproot (Pay-to-Taproot - P2TR)::
    Taproot, активированный в ноябре 2021 года, - это новый тип вывода, который привязывает биткоин к дереву условий траты вывода или к одному корневому условию.
	(((Activating in November 2021, Taproot is a new output type that locks bitcoin to a tree of spending conditions, or a single root condition.)))

адрес P2TR (P2TR address)::
    Формат адреса Taproot, представляющий SegWit v1, представляет собой адрес в bech32m-кодировке и начинается с "bc1p".
	(((The Taproot address format, representing SegWit v1, is a bech32m-encoded address and starts with "bc1p".)))

платеж (payment)::
    Платеж Lightning происходит, когда биткоин передается в сети Lightning Network. Платежи обычно не отображаются в блокчейне Bitcoin.
    (((A Lightning payment occurs when bitcoin is transferred within the Lightning Network. Payments are generally not seen on the Bitcoin blockchain.)))

платёжный канал(payment channel)::
    Платежный канал - это финансовые отношения между двумя узлами в сети Lightning, созданные с помощью транзакции биткоина с платежом по мультиподписному адресу.
    Партнеры по каналу могут использовать канал для отправки биткоинов туда и обратно друг другу без фиксации всех транзакций в блокчейне Биткоина.
    В типичном платежном канале в блокчейн добавляются только две транзакции - транзакция пополнения и транзакция обязательства.
    Платежи, отправленные через канал, не записываются в блокчейн и, как говорят, происходят "off-chain".
    (((A payment channel is a financial relationship between two nodes on the Lightning Network, created using a bitcoin transaction paying a multisignature address.
    The channel partners can use the channel to send bitcoin back and forth between each other without committing all of the transactions to the Bitcoin blockchain.
    In a typical payment channel only two transactions, the funding transaction and the commitment transaction, are added to the blockchain.
    Payments sent across the channel are not recorded in the blockchain and are said to occur "off-chain.")))

платёжный слой (payment layer)::
    Верхний, пятый уровень набора протоколов сети Lightning работает поверх слоя маршрутизации.
    В его обязанности входит обеспечение процесса оплаты через счета BOLT #11.
    Хотя он в значительной степени использует граф канала из протокола слухов, как определено в BOLT #7, фактические стратегии доставки платежа не входят в спецификацию протокола и остаются на усмотрение разработчиков.
    Поскольку эта тема очень важна для обеспечения надежности процесса доставки платежей, мы включили ее в эту книгу.
    (((The top and fifth layer of the Lightning Network protocol suite operates on top of the routing layer.
    Its responsibility is to enable the payment process via BOLT #11 invoices.
    While it heavily uses the channel graph from the gossip protocol as defined in BOLT #7, the actual strategies to deliver a payment are not part of the specification of the protocol and are left to the implementations.
    As this topic is very important to ensure reliability of the payment delivery process, we included it in this book.)))

пир (peer)::
    Участники peer-to-peer сети. В сети Lightning пиры соединяются друг с другом посредством зашифрованной, аутентифицированной связи через TCP-сокет, по IP или Tor.
    (((The participants in a peer-to-peer network. In the Lightning Network, peers connect to each other via encrypted, authenticated communication through a TCP socket, over IP or Tor.)))

слой peer-to-peer(peer-to-peer layer)::
    Слой peer-to-peer - это третий слой набора протоколов Lightning Network, который работает поверх слоя обмена сообщениями.
    Он отвечает за определение синтаксиса и семантики информации, которой обмениваются пиры с помощью сообщений Lightning.
    Сюда входят управляющие сообщения, определенные в BOLT #9; сообщения о создании, действии и закрытии канала, определенные в BOLT #2; а также сообщения слухов и маршрутизации, определенные в BOLT #7.
    (((The peer-to-peer layer is the third layer of the Lightning Network protocol suite and works on top of the messaging layer.
    It is responsible for defining the syntax and semantics of information exchanged between peers via Lightning messages.
    This consists of control messages as defined in BOLT #9; channel establishment, operation, and closing messages as defined in BOLT #2; as well as gossip and routing messages as defined in BOLT #7.)))

приватный канал (private channel)::
    Канал, о котором не сообщается остальной части сети.
    Технически " приватный" - это неправильное название, потому что эти каналы все равно могут быть идентифицированы с через подсказки маршрутизации и транзакции обязательств.
    Их лучше называть "необъявленными" (unannounced) каналами.
	При использовании необъявленного канала партнеры по каналу могут отправлять и получать платежи между собой в обычном режиме.
    Однако остальная часть сети не знает об этом канале и, как правило, не может использовать его для маршрутизации платежей.
    Поскольку количество и емкость необъявленных каналов неизвестны, общее количество и емкость публичных каналов составляют лишь часть всей сети Lightning Network.
    (((A channel not announced to the rest of the network.
    Technically, "private" is a misnomer because these channels can still be identified through routing hints and commitment transactions.
    They are better described as "unannounced" channels.
	With an unannounced channel, the channel partners can send and receive payments between each other as normal.
    However, the rest of the network will not be aware of the channel and so cannot typically use it to route payments.
    Because the number and capacity of unannounced channels is unknown, the total public channel count and capacity only accounts for a portion of the total Lightning Network.)))

пре-образ / предварительный образ (preimage)::
    В контексте криптографии и, в частности, в сети Lightning, пре-образ относится к входу хэш-функции, которая выдает специальный хэш. Вычислить пре-образ из хэша не представляется возможным (хэш-функции работают только в одну сторону). Выбрав в качестве пре-образа секретное случайное значение и вычислив его хэш, мы можем заявить о своем пре-образе и позже раскрыть его. Любой может подтвердить, что раскрытый пре-образ правильно выдает хэш.
	(((In the context of cryptography and specifically in the Lightning Network, the preimage refers to the input of a hash function that produces a specific hash. It is not feasible to compute the preimage from the hash (hash functions only go one way). By selecting a secret random value as a preimage and calculating its hash, we can commit to that preimage and later reveal it. Anyone can confirm that the revealed preimage correctly produces the hash.)))

Доказательство Работы(Proof of Work - PoW)::
    Данные, для нахождения которых требуются значительные затраты на вычисления, и которые могут быть легко проверены любым желающим, чтобы доказать объем работы, который потребовался для их получения.
    В биткоине майнеры должны найти числовое решение алгоритма SHA-256, которое соответствует общей для сети цели, называемой целью сложности.
    Дополнительную информацию см. в разделе _Bitcoin mining_.
    (((Data that requires significant computation to find, and can be easily verified by anyone to prove the amount of work that was required to produce it.
    In Bitcoin, miners must find a numeric solution to the SHA-256 algorithm that meets a network-wide target, called the difficulty target.
    See _Bitcoin mining_ for more information.)))

Контракт с Точечной Блокировкой по Времени (Point Time-Locked Contract - PTLC)::
    Контракт с точечной блокировкой по времени (PTLC) - это сценарий Биткойна, который позволяет условно потратить средства либо при предъявлении секрета, либо по истечении определенной высоты блока, подобно HTLC. В отличие от HTLC, PTLC зависят не от пре-образа хэш-функции, а от закрытого ключа эллиптической кривой. Таким образом, предположение о безопасности основано на дискретном логарифме. PTLC еще не внедрены в сети Lightning.
    (((A Point Time-Locked Contract (PTLC) is a Bitcoin script that allows a conditional spend either on the presentation of a secret or after a certain blockheight has passed, similar to an HTLC. Unlike HTLCs, PTLCs do not depend on a preimage of a hash function but rather on the private key from an elliptic curve point. The security assumption is thus based on the discrete logarithm. PTLCs are not yet implemented on the Lightning Network.)))

относительная временная блокировка (relative timelock)::
    Относительная временная блокировка - это тип временной блокировки, который позволяет входу указать самое раннее время, когда этот вход может быть добавлен в блок. Это время является относительным и основано на том, когда выход, на который ссылается этот вход, был записан в блок. Относительные временные блокировки устанавливаются полем транзакции +nSequence+ и +CHECKSEQUENCEVERIFY+ (CSV) операционным кодом Сценария Bitcoin, который был введен в BIP-68/112/113.
    (((A relative timelock is a type of timelock that allows an input to specify the earliest time the input can be added to a block. The time is relative and is based on when the output referenced by that input was recorded in a block. Relative timelocks are set by the +nSequence+ transaction field and +CHECKSEQUENCEVERIFY+ (CSV) Bitcoin Script opcode, which was introduced by BIP-68/112/113.)))

Отзываемый Контракт с Последовательностью Погашения(Revocable Sequence Maturity Contract - RSMC)::
    Этот контракт используется для создания платежного канала между двумя пользователями Bitcoin или LN, которым не нужно доверять друг другу.
    Название происходит от последовательности состояний, которые кодируются как транзакции обязательств и могут быть отозваны в случае неправомерной публикации и обработаны в сети Биткойн.
    (((This contract is used to construct a payment channel between two Bitcoin or LN users who do not need to trust each other.
    The name comes from a sequence of states that are encoded as commitment transactions and can be revoked if wrongfully published and mined by the Bitcoin network.)))

revocation key (revocation key)::
    Каждый RSMC содержит два ключа отзыва. Каждый партнер по каналу знает один ключ отзыва. Зная оба ключа отзыва, выход RSMC может быть потрачен в течение заданного временного интервала.  Во время переговоров о новом состоянии канала происходит обмен старыми ключами отзыва, тем самым "отменяя" старое состояние.  Ключи отзыва используются для того, чтобы партнеры по каналу не передавали старое состояние канала.
    (((Every RSMC contains two revocation keys. Each channel partner knows one revocation key. Knowing both revocation keys, the output of the RSMC can be spent within the predefined timelock.  While negotiating a new channel state, the old revocation keys are shared, thereby "revoking" the old state.  Revocation keys are used to discourage channel partners from broadcasting an old channel state.)))

RIPEMD-160::
    RIPEMD-160 - это криптографическая хэш-функция, которая создает 160-битный (20-байтовый) хэш.
    (((RIPEMD-160 is a cryptographic hash function that produces a 160-bit (20-byte) hash.)))

слой маршрутизации (routing layer)::
    Четвертый слой набора протоколов сети Lightning работает поверх peer-to-peer слоя.
    В его обязанности входит определение криптографических примитивов и необходимого протокола связи для безопасной и атомарной транспортировки биткоина от узла-отправителя к узлу-получателю.
    В то время как BOLT #4 определяет onion формат, который используется для передачи транспортной информации удаленным пирам, с которыми нет прямого соединения, фактическая onion-транспортировка и криптографические примитивы определены в BOLT #2.
    (((The fourth layer of the Lightning Network protocol suite operates on top of the peer-to-peer layer.
    Its responsibility is to define the cryptographic primitives and necessary communication protocol to allow the secure and atomic transport of bitcoin from a sending node to a recipient node.
    While BOLT #4 defines the onion format that is used to communicate transport information to remote peers with whom no direct connections exist, the actual transport of the onions and cryptographic primitives are defined in BOLT #2.)))

топология (topology)::
    Топология сети Lightning описывает форму сети Lightning в виде математического графа. Узлы графа - это узлы сети Lightning (участники/пиры сети). Ребра графа - это платежные каналы.
    Топология сети Lightning публично транслируется с помощью протокола слухов, за исключением необъявленных каналов.
    Это означает, что сеть Lightning может быть значительно больше, чем объявленное количество каналов и узлов.
    Знание топологии представляет особый интерес для процесса маршрутизации платежей на основе источника, в котором отправитель сам обнаруживает маршрут.
    (((The topology of the Lightning Network describes the shape of the Lightning Network as a mathematical graph. Nodes of the graph are the Lightning nodes (network participants/peers). The edges of the graph are the payment channels.
    The topology of the Lightning Network is publicly broadcast with the help of the gossip protocol, with the exception of unannounced channels.
    This means that the Lightning Network may be significantly larger than the announced number of channels and nodes.
    Knowing the topology is of particular interest in the source-based routing process of payments in which the sender discovers a route.)))

cатоши (satoshi)::
    Сатоши - это наименьшая единица (" деноминации") биткоина, которая может быть записана в блокчейн. Один сатоши равен 1/100 миллионной части (0,00000001) биткоина и назван в честь создателя биткоина, Сатоши Накамото.
    (((A satoshi is the smallest unit (denomination) of bitcoin that can be recorded on the blockchain. One satoshi is 1/100 millionth (0.00000001) of a bitcoin and is named after the creator of Bitcoin, Satoshi Nakamoto.)))

Сатоши Накамото (Satoshi Nakamoto)::
    Сатоши Накамото - имя которое использовано для обозначения человека или группы людей, разработавших Bitcoin и создавших его первоначальную эталонную реализацию. В рамках этой реализации они также разработали первую блокчейн базу данных. В процессе работы они первыми решили проблему двойной траты для цифровой валюты. Их настоящая личность остается неизвестной.
    (((Satoshi Nakamoto is the name used by the person or group of people who designed Bitcoin and created its original reference implementation. As part of the implementation, they also devised the first blockchain database. In the process, they were the first to solve the double-spending problem for digital currency. Their real identity remains unknown.)))

подпись Шнорра (Schnorr signature)::
    Новая схема цифровой подписи, которая будет активирована в Bitcoin в ноябре 2021 года. Она позволяет внедрять инновации в сети Lightning, такие как эффективные PTLC (улучшение HTLC).
    (((A new digital signature scheme that will be activated in Bitcoin in November 2021. It enables innovations on the Lightning Network, such as efficient PTLCs (an improvement on HTLCs)))).

сценарий, сценарий Биткойна (script, Bitcoin Script)::
    В Bitcoin используется система сценариев для транзакций, называемая Bitcoin Script. Напоминающая язык программирования Forth, она проста, основана на стеке и обрабатывается слева направо. Он намеренно Turing-неполный, без циклов и рекурсии.
    (((Bitcoin uses a scripting system for transactions called Bitcoin Script. Resembling the Forth programming language, it is simple, stack-based, and processed from left to right. It is purposefully Turing-incomplete, without loops or recursion.)))

ScriptPubKey (известный как pubkey script)::
    ScriptPubKey или pubkey script - скрипт, включенный в выводы и задающий условия, которые должны быть выполнены для того, чтобы эти выводы были потрачены. Данные для выполнения условий могут быть предоставлены в скрипте подписи. См. также _ScriptSig_.
    (((ScriptPubKey or pubkey script, is a script included in outputs which sets the conditions that must be fulfilled for those outputs to be spent. Data for fulfilling the conditions can be provided in a signature script. See also _ScriptSig_.)))

ScriptSig (известный как signature script)::
    ScriptSig или сценарий подписи - это данные, генерируемые спендером, которые почти всегда используются в качестве переменных для выполнения pubkey script.
    (((ScriptSig or signature script is the data generated by a spender, which are almost always used as variables to satisfy a pubkey script.)))

секретный ключ (secret key (известный как private key))::
    Секретное число, которое разблокирует отправляемый на соответствующий адрес биткоин. pass:[<span class="keep-together">Секретный</span>] ключ выглядит следующим образом: +5J76sF8L5j&#x200b;TtzE96r66Sf8cka9y44wdpJjMwCxR3tzLh3i&#x200b;bVPxh+.
    (((The secret number that unlocks bitcoin sent to the corresponding address. pass:[<span class="keep-together">A secret</span>] key looks like this: +5J76sF8L5j&#x200b;TtzE96r66Sf8cka9y44wdpJjMwCxR3tzLh3i&#x200b;bVPxh+.)))

Сторонний Свидетель (Segregated Witness - SegWit)::
    Segregated Witness (SegWit) - это обновление протокола биткойна, представленное в 2017 году, которое добавляет нового свидетеля для подписей и других доказательств авторизации транзакций. Это новое поле свидетеля освобождено от вычисления ID транзакции (transaction ID), что решает большинство проблем с нестабильностью транзакций третьих лиц. Segregated Witness был развернут как софтфорк и представляет собой изменение, которое технически делает правила протокола Bitcoin более строгими.
    (((Segregated Witness (SegWit) is an upgrade to the Bitcoin protocol introduced in 2017 that adds a new witness for signatures and other transaction authorization proofs. This new witness field is exempt from the calculation of the transaction ID, which solves most classes of third-party transaction malleability. Segregated Witness was deployed as a soft fork and is a change that technically makes Bitcoin’s protocol rules more restrictive.)))

Защищенный Хэш-Алгоритм (Secure Hash Algorithm - SHA)::
    Secure Hash Algorithm или SHA - это семейство криптографических хэш-функций, опубликованных Национальным Институтом Стандартов и Технологий (NIST). В настоящее время протокол биткойна использует SHA-256, который создает 256-битный хэш.
    (((The Secure Hash Algorithm or SHA is a family of cryptographic hash functions published by the National Institute of Standards and Technology (NIST). The Bitcoin protocol currently uses SHA-256, which produces a 256-bit hash.)))

короткий ID канала(short channel ID - scid)::
    После установления канала индекс транзакции пополнения в блокчейне используется в качестве короткого идентификатора канала для его уникальной идентификации.
    Короткий идентификатор канала состоит из восьми байтов, содержащих три числа.
    В сериализованной форме эти три числа представлены в виде десятичных значений, разделенных буквой "x" (например, +600123x01x00+).
    Первое число (4 байта) - это высота блока.
    Второе число (2 байта) - это индекс транзакции пополнения с блоками.
    Последнее число (2 байта) - вывод транзакции.
    (((Once a channel is established, the index of the funding transaction on the blockchain is used as the short channel ID to uniquely identify the channel.
    The short channel ID consists of eight bytes referring to three numbers.
    In its serialized form, it depicts these three numbers as decimal values separated by the letter "x" (e.g., +600123x01x00+)
    The first number (4 bytes) is the block height.
    The second number (2 bytes) is the index of the funding transaction with the blocks.
    The last number (2 bytes) is the transaction output.)))

упрощенная верификация платежей (simplified payment verification - SPV)::
    SPV или упрощенная верификация платежей - это метод подтверждения того, что определенные транзакции были включены в блок, без загрузки всего блока. Этот метод используется некоторыми облегченными Bitcoin и Lightning кошельками.
    (((SPV or simplified payment verification is a method for verifying that particular transactions were included in a block without downloading the entire block. The method is used by some lightweight Bitcoin and Lightning wallets.)))

маршрутизация на основе источника (source-based routing)::
    В сети Lightning отправитель платежа сам определяет его маршрут.
    Хотя это снижает процент успеха процесса маршрутизации, это повышает конфиденциальность платежей.
    Благодаря формату SPHINX Mix Format, используемому в onion-маршрутизации, все узлы маршрутизации не знают ни отправителя платежа, ни конечного получателя.
    Маршрутизация на основе источника принципиально не похожа на то, как работает маршрутизация по интернет-протоколу.
    (((On the Lightning Network, the sender of a payment decides the route of the payment.
    While this decreases the success rate of the routing process, it increases the privacy of payments.
    Due to the SPHINX Mix Format used by onion routing, all routing nodes do not know the originator of a payment or the final recipient.
    Source-based routing is fundamentally different from how routing works on the Internet Protocol.)))

Софтфорк (soft fork)::
    Софтфорк, или софтфорк-изменение - это обновление протокола с прямой и обратной совместимостью, позволяющее как старым, так и новым узлам продолжать использовать одну и ту же цепочку.
    (((Soft fork, or soft-forking change, is a protocol upgrade that's forward and backward compatible, so it allows both old nodes and new nodes to continue using the same chain.)))

SPHINX Mix Format::
    Особая техника onion-маршрутизации, используемая в сети Lightning и изобретенная https://cypherpunks.ca/~iang/pubs/Sphinx_Oakland09.pdf[George Danezis and Ian Goldberg in 2009].
    В формате SPHINX Mix Format каждое сообщение onion-пакета дополняется некоторыми случайными данными, так что ни один хоп не может определить, как далеко по маршруту оно прошло.
    Хотя конфиденциальность отправителя и получателя платежа защищена, каждый узел все равно может вернуть сообщение об ошибке на пути к отправителю сообщения.
    (((A particular technique for onion routing used in the Lightning Network and invented by https://cypherpunks.ca/~iang/pubs/Sphinx_Oakland09.pdf[George Danezis and Ian Goldberg in 2009].
    With the SPHINX Mix Format, each message of the onion package is padded with some random data so that no single hop can estimate how far along the route it has traveled.
    While the privacy of the sender and receiver of the payment is protected, each node is still able to return an error message along the path to the originator of the message.)))

submarine-обмен (submarine swap)::
    Submarine-обмен - это не требующий доверия атомарный обмен между on-chain Bitcoin-адресами и off-chain платежами сети Lightning. Подобно тому как в LN-платежах используются HTLC, которые обусловливают окончательное требование на получение средств раскрытием получателем секрета (пре-образ хэша), submarine-обмены используют тот же механизм для перевода средств через барьер on-chain/off-chain с минимальным доверием. Обратные submarine-обмены позволяют осуществлять обмен в обратном направлении - с off-chain LN-платежа на on-chain Bitcoin-адрес.
    (((A submarine swap is a trustless atomic swap between on-chain Bitcoin addresses and off-chain Lightning Network payments. Just as LN payments use HTLCs that make the final claim on funds conditional on the recipient revealing a secret (hash preimage), submarine swaps use the same mechanism to transfer funds across the on-chain/off-chain barrier with minimal trust. Reverse submarine swaps allow swaps in the opposite direction, from an off-chain LN payment to an on-chain Bitcoin address.)))

таймлок (timelock)::
    Таймлок - это тип обременения, который ограничивает трату некоторого количества биткоинов до определенного будущего времени или высоты блока. Таймлоки занимают важное место во многих контрактах Биткойна, включая платежные каналы и HTLC.
    (((A timelock is a type of encumbrance that restricts the spending of some bitcoin until a specified future time or block height. Timelocks feature prominently in many Bitcoin contracts, including payment channels and HTLCs.)))

транзакция (transaction)::
    Транзакции - это структуры данных, используемые в Bitcoin для перевода биткоинов с одного адреса на другой.
    Несколько тысяч транзакций объединяются в блок, который затем записывается (майнится) на блокчейне.
    Первая транзакция в каждом блоке, называемая coinbase-транзакцией, генерирует новый биткойн.
    (((Transactions are data structures used by Bitcoin to transfer bitcoin from one address to another.
    Several thousand transactions are aggregated in a block, which is then recorded (mined) on the blockchain.
    The first transaction in each block, called the coinbase transaction, generates new bitcoin.)))

гибкость транзакции (transaction malleability)::
    Гибкость транзакции - это свойство, согласно которому хэш транзакции может изменяться без изменения семантики транзакции.
    Например, изменение подписи может изменить хэш транзакции.
    Транзакция обязательства нуждается в хэше  транзакции пополнения, и если хэш транзакции пополнения изменится, транзакции, зависящие от нее, станут недействительными. Это приведет к тому, что пользователи не смогут потребовать возврата средств, если таковые имеются.
    Софтфорк Segregated Witness решает эту проблему и поэтому стал важным обновлением для поддержки сети Lightning.
    (((Transaction malleability is a property that the hash of a transaction can change without changing the semantics of the transaction.
    For example, altering the signature can change the hash of a transaction.
    A commitment transaction needs the hash of a funding transaction, and if the hash of the funding transaction changes, transactions depending on it will become invalid. This will make users unable to claim the refunds if there are any.
    The Segregated Witness soft fork addresses this issue and was therefore an important upgrade to support the Lightning Network.)))

транспортный слой (transport layer)::
    В компьютерных сетях транспортный слой - это концептуальное разделение методов, используемых компьютерами (и, в конечном счете, приложениями) для общения друг с другом.
    Транспортный слой предоставляет услуги связи между компьютерами, такие как управление потоком, верификация и мультиплексирование (чтобы позволить нескольким приложениям работать на компьютере одновременно).
    (((In computer networking, the transport layer is a conceptual division of the methods used by computers (and ultimately applications) to talk to each other.
    The transport layer provides communication services between computers, such as flow control, verification, and multiplexing (to allow multiple applications to work on a computer at the same time).)))

вывод непотраченных средств (unspent transaction output - UTXO)::
    См. _output_.
    (((See _output_.)))

кошелек (wallet)::
    Кошелек - это часть программного обеспечения, в котором хранятся приватные ключи Bitcoin. Он используется для создания и подписи транзакций Bitcoin. В контексте сети Lightning в нем также хранятся секреты отмены старого состояния канала и последних предварительно подписанных транзакций обязательств.
    (((A wallet is a piece of software that holds Bitcoin private keys. It is used to create and sign Bitcoin transactions. In the context of the Lightning Network, it also holds revocation secrets of old channel state and the latest presigned commitment transactions.)))

наблюдатель (watchtower)::
    Стражи - это служба безопасности в сети Lightning, которая отслеживает платежные каналы на предмет потенциальных нарушений протокола.
    Если один из партнеров канала выходит из сети или теряет резервную копию, страж сохраняет резервные копии и может восстановить информацию о канале.
    (((Watchtowers are a security service on the Lightning Network that monitor payment channels for potential protocol breaches.
    If one of the channel partners goes offline or loses their backup, a watchtower keeps backups and can restore their channel information.)))
+
Стражи также следят за блокчейном Bitcoin и могут отправить штрафную транзакцию, если один из партнеров попытается "обмануть", передав устаревшее состояние. Стражи могут запускаться как самими партнерами по каналам, так и в качестве платной услуги, предлагаемой третьей стороной. Стражи не имеют контроля над средствами в самих каналах.
(((Watchtowers also monitor the Bitcoin blockchain and can submit a penalty transaction if one of the partners tries to "cheat" by broadcasting an outdated state. Watchtowers can be run by the channel partners themselves, or as a paid service offered by a third party. Watchtowers have no control over the funds in the channels themselves.)))

Некоторые определения были взяты под лицензией CC-BY с сайтов https://en.bitcoin.it/wiki/Main_Page[Bitcoin Wiki], https://en.wikipedia.org[Wikipedia], https://github.com/bitcoinbook/bitcoinbook[_Mastering Bitcoin_] или из других публикаций с открытым исходным кодом.
(((Some contributed definitions have been sourced under a CC-BY license from the https://en.bitcoin.it/wiki/Main_Page[Bitcoin Wiki], https://en.wikipedia.org[Wikipedia], https://github.com/bitcoinbook/bitcoinbook[_Mastering Bitcoin_], or from other open source publications.)))